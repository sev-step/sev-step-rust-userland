//! Rust wrappers for the types in the "linux/sev-step/sev-step.h" header.
//! Autogenerated in build.rs
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

use std::mem;

use anyhow::bail;
use vm_server::assembly_target::page_ping_ponger::PagePingPongVariant;

include!(concat!(env!("OUT_DIR"), "/bindings.rs"));

impl usp_event_type_t {
    /// Returns the size of the matching event type in bytes
    pub fn event_bytes(&self) -> usize {
        match self {
            usp_event_type_t::PAGE_FAULT_EVENT => mem::size_of::<usp_page_fault_event_t>(),
            usp_event_type_t::SEV_STEP_EVENT => mem::size_of::<sev_step_event_t>(),
        }
    }
}

impl TryInto<PagePingPongVariant> for kvm_page_track_mode {
    type Error = anyhow::Error;

    fn try_into(self) -> Result<PagePingPongVariant, Self::Error> {
        match self {
            kvm_page_track_mode::KVM_PAGE_TRACK_WRITE => Ok(PagePingPongVariant::WRITE),
            kvm_page_track_mode::KVM_PAGE_TRACK_ACCESS => Ok(PagePingPongVariant::READ),
            kvm_page_track_mode::KVM_PAGE_TRACK_EXEC => Ok(PagePingPongVariant::EXEC),
            _ => bail!(format!("Cannot convert {:?} to PagePingPongVariant", &self)),
        }
    }
}
